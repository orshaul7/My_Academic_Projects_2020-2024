class transaction;
	
	// Q7 Start

		// fields
		rand bit [31:0] address;
		rand bit [7:0] data;
		rand bit [2:0] delay; 
		bit parity;
	// Q7 End
	
	

	function bit calc_parity();
	// Q8 Start

		  int count = 0;
		  for (int i = 0; i < 8; i++) begin
			if (data[i] == 1)
			  count++;
		  end
		  parity = (count % 2 == 1) ? 1 : 0;
	// Q8 End
	endfunction
	
	
	
	function new();
	// Q8 Start
			// Randomize the transaction
			if (!randomize()) begin
			  $display("Error: Randomization failed in transaction constructor");
			end
			
			// Calculate and assign parity
			parity = calc_parity();
	// Q8 End
	endfunction
		
endclass





module exercise_3_part_2;

	// Do not modify the following code. It creates the clock and terminates the simulation after some time 
	bit clk;
	always begin
		#10 clk = ~clk;
	end
	initial begin
		#2000 $finish();
	end
	// Do not modify the above code.
	
	
	
	task gen();
		transaction my_t; // Declaring a variable of the class (not an object yet - has to be instantiated)
		forever begin
			// Q10 Start
			@(posedge clk);
			my_t=new();
			$display("Time %0t: Transaction created - Address = 0x%h, Data = 0x%h, Delay = %0d", $time(), my_t.address, my_t.data, my_t.delay);
			repeat (my_t.delay) @(posedge clk);

			// Q10 End
		end
		
	endtask
	
	
	
	initial begin
		gen();
		
	end
endmodule
