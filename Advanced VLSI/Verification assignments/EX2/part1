module array_example();

// Declare array_1 and initialize its values
int array[8];
typedef byte B_4x4t[4][4];



initial begin
  for (int i = 0; i < 8; i = i + 1) begin
	if (i % 2 == 0) begin
	  array[i] = i * 2;
	end else begin
	  array[i] = i * 3;
	end
  end
  
  // Display the contents of array_1
  $display("Array contents:");
  for (int i = 0; i < 8; i = i + 1) begin
	$display("array_1[%0d] = %0d", i, array[i]);
  end
end

// Declare the 4x4 array of bytes and initialize with prime numbers
B_4x4t primes = '{ {2, 3, 5, 7}, {11, 13, 17, 19}, {23, 29, 31, 37}, {41, 43, 47, 53} };



// Initial block to iterate over the primes array and check for primality
initial begin
  // Iterate over the primes array
  for (int row = 0; row < 4; row = row + 1) begin
	for (int col = 0; col < 4; col = col + 1) begin
	  automatic byte num = primes[row][col]; // Get the current number
	  
	  // Call is_prime function and print the result
	  if (is_prime(num) == 1) begin
		$display("%d is a prime", num);
	  end else begin
		$display("%d is not a prime", num);
	  end
	end
  end
end

endmodule




function bit is_prime(byte num);

  static int i = 5;
  
  if (num <= 1) begin
	return 0; // 0 and 1 are not prime numbers
  end
  
  if (num <= 3) begin
	return 1; // 2 and 3 are prime numbers
  end
  
  if (num % 2 == 0 || num % 3 == 0) begin
	return 0; // numbers divisible by 2 or 3 are not prime
  end
  
  while (i * i <= num) begin
	if (num % i == 0 || num % (i + 2) == 0) begin
	  return 0; // number divisible by i or i + 2 is not prime
	end
	i = i + 6; // check next possible prime factors (6k Â± 1)
  end
  
  return 1; // num is prime if none of the above conditions are met
endfunction


typedef bit b_8t [8];
function int dot_prod(b_8t array_1, b_8t array_2);
	
	automatic int result = 0;
	
	for (int i = 0; i < 8; i = i + 1) begin
	  result = result + array_1[i] * array_2[i];
	end
	
	return result;
  endfunction



parameter VECTOR_WIDTH = 128;
typedef bit vector_t[VECTOR_WIDTH];

// Function declaration for rearranging data
function vector_t rearrange_data(vector_t in_data);
  vector_t out_data;
  integer chunk_size;
  
  chunk_size = VECTOR_WIDTH / 4;
  
  // Iterate over chunks of in_data and rearrange into out_data
  for (int i = 0; i < 4; i = i + 1) begin
	// Reverse chunk i of in_data and assign to chunk 3-i of out_data
	for (int j = 0; j < chunk_size; j = j + 1) begin
	  out_data[(3 - i) * chunk_size + j] = in_data[i * chunk_size + chunk_size - 1 - j];
	end
  end
  
  return out_data;
endfunction








